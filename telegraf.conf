# Telegraf configuration

# Telegraf is entirely plugin driven. All metrics are gathered from the
# declared inputs, and sent to the declared outputs.

# Plugins must be declared in here to be active.
# To deactivate a plugin, comment out the name and any variables.

# Use 'telegraf -config telegraf.conf -test' to see what metrics a config
# file would generate.

# Global tags can be specified here in key="value" format.
[global_tags]
  # dc = "us-east-1" # will tag all metrics with dc=us-east-1
  # rack = "1a"
  
# Configuration for telegraf agent
[agent]
  ## Default data collection interval for all inputs
  interval = "10s"
  ## Rounds collection interval to 'interval'
  ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
  round_interval = true

  ## Telegraf will cache metric_buffer_limit metrics for each output, and will
  ## flush this buffer on a successful write.
  metric_buffer_limit = 1000
  ## Flush the buffer whenever full, regardless of flush_interval.
  flush_buffer_when_full = true

  ## Collection jitter is used to jitter the collection by a random amount.
  ## Each plugin will sleep for a random time within jitter before collecting.
  ## This can be used to avoid many plugins querying things like sysfs at the
  ## same time, which can have a measurable effect on the system.
  collection_jitter = "0s"

  ## Default flushing interval for all outputs. You shouldn't set this below
  ## interval. Maximum flush_interval will be flush_interval + flush_jitter
  flush_interval = "10s"
  ## Jitter the flush interval by a random amount. This is primarily to avoid
  ## large write spikes for users running a large number of telegraf instances.
  ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
  flush_jitter = "0s"

  ## Logging configuration:
  ## Run telegraf in debug mode
  debug = false
  ## Run telegraf in quiet mode
  quiet = false
  ## Specify the log file name. The empty string means to log to stdout.
  logfile = "/telegraf/telegraf.log"

  ## Override default hostname, if empty use os.Hostname()
  hostname = ""


###############################################################################
#                                  OUTPUTS                                    #
###############################################################################

# Publish all metrics to /metrics for Prometheus to scrape
[[outputs.prometheus_client]]
  ## Address to listen on.
  listen = "0.0.0.0:9273"

  ## Use HTTP Basic Authentication.
  # basic_username = "Foo"
  # basic_password = "Bar"

  ## If set, the IP Ranges which are allowed to access metrics.
  ##   ex: ip_range = ["192.168.0.0/24", "192.168.1.0/30"]
  # ip_range = []

  ## Path to publish the metrics on.
  path = "/metrics"

  ## Expiration interval for each metric. 0 == no expiration
  # expiration_interval = "60s"

  ## Collectors to enable, valid entries are "gocollector" and "process".
  ## If unset, both are enabled.
  # collectors_exclude = ["gocollector", "process"]

  ## Send string metrics as Prometheus labels.
  ## Unless set to false all string metrics will be sent as labels.
  # string_as_label = true

  ## If set, enable TLS with the given certificate.
  # tls_cert = "/etc/ssl/telegraf.crt"
  # tls_key = "/etc/ssl/telegraf.key"


###############################################################################
#                                  INPUTS                                     #
###############################################################################

# Windows Performance Counters plugin.
# These are the recommended method of monitoring system metrics on windows,
# as the regular system plugins (inputs.cpu, inputs.mem, etc.) rely on WMI,
# which utilize more system resources.
#
# See more configuration examples at:
#   https://github.com/influxdata/telegraf/tree/master/plugins/inputs/win_perf_counters

[[inputs.win_perf_counters]]
  UseWildcardsExpansion = false
  PrintValid = false

  [[inputs.win_perf_counters.object]]
    # Processor usage, alternative to native, reports on a per core.
    ObjectName = "Processor"
    Instances = ["*"]
    Counters = [
      "% Idle Time",
      "% Interrupt Time",
      "% Privileged Time",
      "% User Time",
      "% Processor Time",
      "% DPC Time",
    ]
    Measurement = "win_cpu"
    # Set to true to include _Total instance when querying for all (*).
    IncludeTotal=true

  [[inputs.win_perf_counters.object]]
    # Disk times and queues
    ObjectName = "LogicalDisk"
    Instances = ["*"]
    Counters = [
      "% Idle Time",
      "% Disk Time",
      "% Disk Read Time",
      "% Disk Write Time",
      "Current Disk Queue Length",
      "% Free Space",
      "Free Megabytes",
    ]
    Measurement = "win_disk"
    # Set to true to include _Total instance when querying for all (*).
    #IncludeTotal=false

  [[inputs.win_perf_counters.object]]
    ObjectName = "PhysicalDisk"
    Instances = ["*"]
    Counters = [
      "Disk Read Bytes/sec",
      "Disk Write Bytes/sec",
      "Current Disk Queue Length",
      "Disk Reads/sec",
      "Disk Writes/sec",
      "% Disk Time",
      "% Disk Read Time",
      "% Disk Write Time",      
      "Avg. Disk sec/Read",
      "Avg. Disk sec/Transfer",
      "Avg. Disk sec/Write",
      "Avg. Disk Write Queue Length",
    ]
    Measurement = "win_diskio"
    
  [[inputs.win_perf_counters.object]]
    ObjectName = "SMB Server"
    Instances = ["------"]
    Counters = [
      "Read Bytes/sec",
      "Write Bytes/sec",
    ]
    Measurement = "win_smb_server"    
  
  [[inputs.win_perf_counters.object]]
    ObjectName = "SMB Server Shares"
    Counters = [
      "Avg. sec/Read",
      "Avg. sec/Request",
      "Avg. sec/Write",
      "Write Requests transmitted via SMB Direct/sec",
      "Read Requests transmitted via SMB Direct/sec",
      "Write Bytes transmitted via SMB Direct/sec",
      "Read Bytes transmitted via SMB Direct/sec",
      "Avg. Data Queue Length",
      "Avg. Write Queue Length",
      "Avg. Read Queue Length",
      "Current Data Queue Length",
      "Avg. Data Bytes/Request",
      "Data Requests/sec",
      "Data Bytes/sec",
      "Avg. Bytes/Write",
      "Avg. Bytes/Read",
      "Write Requests/sec",
      "Read Requests/sec",
      "Write Bytes/sec",
      "Read Bytes/sec",
    ]
    Instances = ['*']
    Measurement = "win_smb_server_shares"

  [[inputs.win_perf_counters.object]]
    ObjectName = "System"
    Counters = [
      "Context Switches/sec",
      "System Calls/sec",
      "Processor Queue Length",
      "System Up Time",
      "Threads",
      "Processes",
      "File Data Operations/sec",
    ]
    Instances = ["------"]
    Measurement = "win_system"
    # Set to true to include _Total instance when querying for all (*).
    #IncludeTotal=false

  [[inputs.win_perf_counters.object]]
    # Example query where the Instance portion must be removed to get data back,
    # such as from the Memory object.
    ObjectName = "Memory"
    Counters = [
      "Available Bytes",
      "Cache Faults/sec",
      "Demand Zero Faults/sec",
      "Page Faults/sec",
      "Pages/sec",
      "Transition Faults/sec",
      "Pool Nonpaged Bytes",
      "Pool Paged Bytes",
      "Standby Cache Reserve Bytes",
      "Standby Cache Normal Priority Bytes",
      "Standby Cache Core Bytes",

    ]
    # Use 6 x - to remove the Instance bit from the query.
    Instances = ["------"]
    Measurement = "win_mem"
    # Set to true to include _Total instance when querying for all (*).
    #IncludeTotal=false

  [[inputs.win_perf_counters.object]]
    # Example query where the Instance portion must be removed to get data back,
    # such as from the Paging File object.
    ObjectName = "Paging File"
    Counters = [
      "% Usage",
    ]
    Instances = ["_Total"]
    Measurement = "win_swap"

  [[inputs.win_perf_counters.object]]
    # HTTP Service request queues in the Kernel before being handed over to User Mode.
    ObjectName = "HTTP Service Request Queues"
    Instances = ["*"]
    Counters = ["CurrentQueueSize","RejectedRequests"]
    Measurement = "win_http_queues"
    #IncludeTotal=false #Set to true to include _Total instance when querying for all (*).

  [[inputs.win_perf_counters.object]]
    # IIS, ASP.NET Applications
    ObjectName = "ASP.NET Applications"
    Counters = [
        "Anonymous Requests",
        "Anonymous Requests/Sec",
        "Cache Total Entries",
        "Cache Total Hits",
        "Cache Total Misses",
        "Cache Total Hit Ratio",
        "Cache Total Turnover Rate",
        "Cache API Entries",
        "Cache API Hits",
        "Cache API Misses",
        "Cache API Hit Ratio",
        "Cache API Turnover Rate",
        "Debugging Requests",
        "Errors During Preprocessing",
        "Errors During Compilation",
        "Errors During Execution",
        "Errors Unhandled During Execution",
        "Errors Unhandled During Execution/Sec",
        "Errors Total",
        "Errors Total/Sec",
        "Output Cache Entries",
        "Output Cache Hits",
        "Output Cache Hit Ratio",
        "Output Cache Misses",
        "Output Cache Turnover Rate",
        "Compilations Total",
        "Pipeline Instance Count",
        "Requests Executing",
        "Requests in Application Queue",
        "Requests/Sec",
        "Request Bytes In Total",
        "Request Bytes Out Total",
        "Requests Failed",
        "Requests Not Found",
        "Requests Not Authorized",
        "Requests Succeeded",
        "Requests Timed Out",
        "Requests Total",
        "Sessions Active",
        "Sessions Abandoned",
        "Sessions Timed Out",
        "Sessions Total",
      ]
    Instances = ["*"]
    Measurement = "win_aspnet_app"
    #IncludeTotal=false #Set to true to include _Total instance when querying for all (*).

  [[inputs.win_perf_counters.object]]
    # IIS, ASP.NET
    ObjectName = "ASP.NET"
    Counters = [
        "Application Restarts",
        "Application Running",
        "Request Wait Time",
        "Requests Disconnected",
        "Requests Current",
        "Requests Queued",
        "Requests Rejected",
        "Worker Process Restarts",
        "Worker Process Running"
      ]
    Instances = ["*"]
    Measurement = "win_aspnet"
    #IncludeTotal=false #Set to true to include _Total instance when querying for all (*).

  [[inputs.win_perf_counters.object]]
    # IIS, Web Service
    ObjectName = "Web Service"
    Counters = [
                    "Service Uptime", "Current Connections", "Bytes Sent/sec", "Total Bytes Sent",
                    "Bytes Received/sec", "Total Bytes Received", "Bytes Total/sec", "Total Bytes Transferred",
                    "Get Requests/sec","Total Get Requests", "Post Requests/sec","Total Post Requests",
                    "Put Requests/sec","Total Put Requests", "Delete Requests/sec","Total Delete Requests",
                    "Anonymous Users/sec", "NonAnonymous Users/sec", "Files Sent/sec", "Total Files Sent",
                    "Files Received/sec", "Total Files Received", "Files/sec", "Total Files Transferred",
                    "Not Found Errors/sec", "Locked Errors/sec", "Total Method Requests/sec"
                  ]
    Instances = ["*"]
    Measurement = "win_websvc"
    #IncludeTotal=false #Set to true to include _Total instance when querying for all (*).

  [[inputs.win_perf_counters.object]]
    # Web Service Cache / IIS
    ObjectName = "Web Service Cache"
    Counters = [
                    "Current Files Cached", "Active Flushed Entries", "Total Files Cached", "Total Flushed Files",
                    "File Cache Hits", "File Cache Misses", "File Cache Hits %", "File Cache Flushes",
                    "Current File Cache Memory Usage", "Maximum File Cache Memory Usage", "Current URIs Cached",
                    "Total URIs Cached", "Total Flushed URIs", "URI Cache Hits", "URI Cache Misses", "URI Cache Hits %",
                    "URI Cache Flushes", "Current Metadata Cached", "Total Metadata Cached", "Total Flushed Metadata",
                    "Metadata Cache Hits", "Metadata Cache Misses", "Metadata Cache Hits %", "Metadata Cache Flushes",
                    "Kernel: Current URIs Cached", "Kernel: Total URIs Cached", "Kernel: Total Flushed URIs",
                    "Kernel: URI Cache Hits", "Kernel: Uri Cache Hits/sec", "Kernel: URI Cache Misses", "Kernel: URI Cache Hits %",
                    "Kernel: URI Cache Flushes"
                  ]
    Instances = ["*"]
    Measurement = "win_websvc_cache"
    #IncludeTotal=false #Set to true to include _Total instance when querying for all (*).

  [[inputs.win_perf_counters.object]]
    # Process metrics, in this case for IIS only
    ObjectName = "Process"
    Counters = ["% Processor Time","Handle Count","Private Bytes","Thread Count","Virtual Bytes","Working Set"]
    Instances = ["*"]
    Measurement = "win_proc"
    #IncludeTotal=false #Set to true to include _Total instance when querying for all (*).

  [[inputs.win_perf_counters.object]]
    # .NET CLR Exceptions, in this case for IIS only
    ObjectName = ".NET CLR Exceptions"
    Counters = ["# of Exceps Thrown / sec"]
    Instances = [
                  "*"
                ]
    Measurement = "win_dotnet_exceptions"
    #IncludeTotal=false #Set to true to include _Total instance when querying for all (*).

  [[inputs.win_perf_counters.object]]
    # .NET CLR Jit, in this case for IIS only
    ObjectName = ".NET CLR Jit"
    Counters = ["% Time in Jit","IL Bytes Jitted / sec"]
    Instances = [
                  "*"
                ]
    Measurement = "win_dotnet_jit"
    #IncludeTotal=false #Set to true to include _Total instance when querying for all (*).

  [[inputs.win_perf_counters.object]]
    # .NET CLR Loading, in this case for IIS only
    ObjectName = ".NET CLR Loading"
    Counters = ["% Time Loading"]
    Instances = [
                  "*"
                ]
    Measurement = "win_dotnet_loading"
    #IncludeTotal=false #Set to true to include _Total instance when querying for all (*).

  [[inputs.win_perf_counters.object]]
    # .NET CLR LocksAndThreads, in this case for IIS only
    ObjectName = ".NET CLR LocksAndThreads"
    Counters = ["# of current logical Threads","# of current physical Threads","# of current recognized threads","# of total recognized threads","Queue Length / sec","Total # of Contentions","Current Queue Length"]    
    Instances = [
                  "*"
                ]
    Measurement = "win_dotnet_locks"
    #IncludeTotal=false #Set to true to include _Total instance when querying for all (*).

  [[inputs.win_perf_counters.object]]
    # .NET CLR Memory, in this case for IIS only
    ObjectName = ".NET CLR Memory"
    Counters = ["% Time in GC","# Bytes in all Heaps","# Gen 0 Collections","# Gen 1 Collections","# Gen 2 Collections","# Induced GC","Allocated Bytes/sec","Finalization Survivors","Gen 0 heap size","Gen 1 heap size","Gen 2 heap size","Large Object Heap size","# of Pinned Objects"]    
    Instances = [
                  "*"
                ]
    Measurement = "win_dotnet_mem"
    #IncludeTotal=false #Set to true to include _Total instance when querying for all (*).

  [[inputs.win_perf_counters.object]]
    # .NET CLR Security, in this case for IIS only
    ObjectName = ".NET CLR Security"
    Counters = ["% Time in RT checks","Stack Walk Depth","Total Runtime Checks"]
    Instances = [
                  "*"
                ]
    Measurement = "win_dotnet_security"
    #IncludeTotal=false #Set to true to include _Total instance when querying for all (*).
  
  [[inputs.win_perf_counters.object]]
    # WCF ServiceModel Service
    ObjectName = "ServiceModelService 4.0.0.0"
    Counters = [
        "Calls",
        "Calls Per Second",
        "Calls Outstanding",
        "Calls Failed",
        "Calls Failed Per Second",
        "Calls Faulted",
        "Calls Faulted Per Second",
        "Calls Duration",
        "Instances",
        "Instances Per Second",
        "Percent of Max Concurrent Calls",
        "Percent of Max Concurrent Instances",
        "Percent of Max Concurrent Sessions",
        "Queue Dropped Messages",
        "Queue Dropped Messages Per Second",
        "Queued Poison Messages",
        "Queued Poison Messages Per Second",
        "Queued Rejected Messages",
        "Queued Rejected Messages Per Second"
      ]
    Instances = ["*"]
    Measurement = "win_wcf_servicemodel_service"
    #IncludeTotal=false #Set to true to include _Total instance when querying for all (*).
    
  [[inputs.win_perf_counters.object]]
    # WCF ServiceModel Endpoint
    ObjectName = "ServiceModelEndpoint 4.0.0.0"
    Counters = [
        "Calls",
        "Calls Per Second",
        "Calls Outstanding",
        "Calls Failed",
        "Calls Failed Per Second",
        "Calls Faulted",
        "Calls Faulted Per Second",
        "Calls Duration"
      ]
    Instances = ["*"]
    Measurement = "win_wcf_servicemodel_endpoint"
    #IncludeTotal=false #Set to true to include _Total instance when querying for all (*).
    
  [[inputs.win_perf_counters.object]]
    # WCF ServiceModel Operation
    ObjectName = "ServiceModelOperation 4.0.0.0"
    Counters = [
        "Calls",
        "Calls Per Second",
        "Calls Outstanding",
        "Calls Failed",
        "Calls Failed Per Second",
        "Calls Faulted",
        "Calls Faulted Per Second",
        "Calls Duration"
      ]
    Instances = ["*"]
    Measurement = "win_wcf_servicemodel_operation"
    #IncludeTotal=false #Set to true to include _Total instance when querying for all (*).
    
# Windows system plugins using WMI (disabled by default, using
# win_perf_counters over WMI is recommended)

# # Read metrics about cpu usage
# [[inputs.cpu]]
#   ## Whether to report per-cpu stats or not
#   percpu = true
#   ## Whether to report total system cpu stats or not
#   totalcpu = true
#   ## Comment this line if you want the raw CPU time metrics
#   fielddrop = ["time_*"]


# # Read metrics about disk usage by mount point
# [[inputs.disk]]
#   ## By default, telegraf gather stats for all mountpoints.
#   ## Setting mountpoints will restrict the stats to the specified mountpoints.
#   ## mount_points=["/"]
#
#   ## Ignore some mountpoints by filesystem type. For example (dev)tmpfs (usually
#   ## present on /run, /var/run, /dev/shm or /dev).
#   # ignore_fs = ["tmpfs", "devtmpfs"]


# # Read metrics about disk IO by device
# [[inputs.diskio]]
#   ## By default, telegraf will gather stats for all devices including
#   ## disk partitions.
#   ## Setting devices will restrict the stats to the specified devices.
#   ## devices = ["sda", "sdb"]
#   ## Uncomment the following line if you do not need disk serial numbers.
#   ## skip_serial_number = true


# # Read metrics about memory usage
# [[inputs.mem]]
#   # no configuration


# # Read metrics about swap memory usage
# [[inputs.swap]]
#   # no configuration

